CAP theorem

In theoretical computer science, the CAP theorem, also named Brewer's theorem after computer scientist Eric Brewer,
states that it is impossible for a distributed data store to simultaneously provide more than two out of the follow-
ing three guarantees:
    * Consistency: Every read receives the most recent write or an error
    * Availability: Every request receives a (non-error) response - without the guarantee that it contains the most 
                    recent write
    * Partition tolerance: The system continues to operate despite an arbitrary number of messages being dropped
                    (or delayed) by the network between nodes
In particular, the CAP theorem implies that in the presence of a network partition, one has to choose between consi-
stency and availability. Note that consistency as defined in the CAP theorem is quite different from the consistency
guaranteed in ACID database transactions.

Explanation:

No distributed system is safe from network failures, thus network partitioning generally has to be tolerated. In the
presence of a partition, one is then left with two options: consistency or availability. When choosing consistency
over availability, the system will always process the query and try to return the most recent available version of
the information, even if it cannot gurantee it is up to date due to network partitioning.
In the absence of network failure - that is, when the distributed system is running normally - both availability and
consistency can be satisfied.
CAP is frequently misunderstood as if one has to choose to abandon one of the three guarantees at all times. In fact
, the choice is really between consistency and availability only when a network partition or failure happens; at all
other times, no trade-off has to be made.
Database systems designed with traditional ACID guarantees in mind such as RDBMS choose consistency over availability
, whereas system designed around the BASE philosophy, common in the NoSQL movement for example, choose availability
over consistency.
The PACELC theorem builds on CAP by stating that even in the absence of partitioning, anther trade-off between laten-
cy and consistency occurs.

History

According to University of California, Berkeley computer scientist Eric Brewer, the theorem first appeared in autumn
1998. It was published as the CAP principle in 1999 and presented as a conjecture by Brewer at the 2000 Symposium
on Principles of Distributed Computing (PODC). In 2002, Seth Gilbert and Nancy Lynch of MIT published a formal proof
of Brewer's conjecture, rendering it a theorem.
In 2012, Brewer clarified some of his positions, including why the often-used "two out of three" concept can be mis-
leading or misapplied, and the different definition if consistency used in CAP relative to the one used in ACID.
A similar theorem stating the trade-off between consistency and availability in distributed systems was published
by Birman and Friedman in 1996. The result of Birman and Friedman restricted this lower bound to non-commuting ope-
rations.